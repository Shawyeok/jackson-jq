[
    {
        "in": [
            0,
            1,
            2
        ],
        "out": [
            [
                0,
                1,
                "hi!"
            ]
        ],
        "q": "[(label $here | .[] | if .>1 then break $here else . end), \"hi!\"]"
    },
    {
        "in": [
            0,
            2,
            1
        ],
        "out": [
            [
                0,
                "hi!"
            ]
        ],
        "q": "[(label $here | .[] | if .>1 then break $here else . end), \"hi!\"]"
    },
    {
        "in": [
            11,
            22,
            33,
            44,
            55,
            66,
            77,
            88,
            99
        ],
        "out": [
            [
                11,
                22,
                33
            ]
        ],
        "q": "[label $out | foreach .[] as $item ([3, null]; if .[0] < 1 then break $out else [.[0] -1, $item] end; .[1])]"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "out": [
            [
                1,
                4,
                5
            ]
        ],
        "q": "del(.[2:4],.[0],.[-2:])"
    },
    {
        "in": {
            "as": 1,
            "exp": 3,
            "str": 2
        },
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": ". as {as: $kw, \"str\": $str, (\"e\"+\"x\"+\"p\"): $exp} | [$kw, $str, $exp]"
    },
    {
        "in": 1,
        "out": [
            [
                33,
                101
            ]
        ],
        "q": "def f: .+1; def g: f; def f: .+100; def f(a):a+.+11; [(g|f(20)), f]"
    },
    {
        "in": null,
        "out": [
            [
                "foo",
                0
            ],
            [
                "foo",
                1
            ]
        ],
        "q": "path(.foo[0,1])"
    },
    {
        "in": [
            1,
            5,
            3
        ],
        "out": [
            [
                1
            ]
        ],
        "q": "path(.[] | select(.>3))"
    },
    {
        "in": 42,
        "out": [
            []
        ],
        "q": "path(.)"
    },
    {
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        },
        "out": [
            "Invalid path expression with result [{\"b\":0}]"
        ],
        "q": "try path(.a | map(select(.b == 0))) catch ."
    },
    {
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        },
        "out": [
            "Invalid path expression near attempt to access element 0 of [{\"b\":0}]"
        ],
        "q": "try path(.a | map(select(.b == 0)) | .[0]) catch ."
    },
    {
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        },
        "out": [
            "Invalid path expression near attempt to access element \"c\" of [{\"b\":0}]"
        ],
        "q": "try path(.a | map(select(.b == 0)) | .c) catch ."
    },
    {
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        },
        "out": [
            "Invalid path expression near attempt to iterate through [{\"b\":0}]"
        ],
        "q": "try path(.a | map(select(.b == 0)) | .[]) catch ."
    },
    {
        "in": {
            "a": {
                "b": 0
            }
        },
        "out": [
            [
                "a",
                "b"
            ]
        ],
        "q": "path(.a[path(.b)[0]])"
    },
    {
        "in": {
            "bar": 42,
            "foo": [
                "a",
                "b",
                "c",
                "d"
            ]
        },
        "out": [
            "b",
            {
                "bar": 42,
                "foo": [
                    "a",
                    20,
                    "c",
                    "d"
                ]
            },
            {
                "bar": 42,
                "foo": [
                    "a",
                    "c",
                    "d"
                ]
            }
        ],
        "q": "[\"foo\",1] as $p | getpath($p), setpath($p; 20), delpaths([$p])"
    },
    {
        "in": [
            [
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                2
            ]
        ],
        "out": [
            [
                null,
                null,
                2
            ],
            [
                [
                    0,
                    null,
                    42
                ],
                [
                    0,
                    1,
                    42
                ],
                [
                    0,
                    1,
                    42
                ]
            ],
            [
                [
                    0
                ],
                [
                    0,
                    1
                ],
                [
                    0,
                    1
                ]
            ]
        ],
        "q": "map(getpath([2])), map(setpath([2]; 42)), map(delpaths([[2]]))"
    },
    {
        "in": [
            [
                {
                    "foo": 2,
                    "x": 1
                }
            ],
            [
                {
                    "bar": 2
                }
            ]
        ],
        "out": [
            [
                [
                    {
                        "x": 1
                    }
                ],
                [
                    {
                        "bar": 2
                    }
                ]
            ]
        ],
        "q": "map(delpaths([[0,\"foo\"]]))"
    },
    {
        "in": {
            "bar": false
        },
        "out": [
            null,
            {
                "bar": false,
                "foo": [
                    null,
                    20
                ]
            },
            {
                "bar": false
            }
        ],
        "q": "[\"foo\",1] as $p | getpath($p), setpath($p; 20), delpaths([$p])"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": "delpaths([[-200]])"
    },
    {
        "in": {},
        "out": [
            "Paths must be specified as an array"
        ],
        "q": "try delpaths(0) catch ."
    },
    {
        "in": {
            "bar": [
                0,
                1
            ],
            "foo": [
                0,
                1,
                2,
                3,
                4
            ]
        },
        "out": [
            null,
            {
                "bar": [
                    0,
                    1
                ],
                "foo": [
                    0,
                    1,
                    2,
                    3,
                    4
                ]
            },
            {
                "bar": [
                    1
                ],
                "foo": [
                    1,
                    4
                ]
            },
            {
                "bar": [
                    1
                ]
            }
        ],
        "q": "del(.), del(empty), del((.foo,.bar,.baz) | .[2,3,0]), del(.foo[0], .bar[0], .foo, .baz.bar[0].x)"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        ],
        "out": [
            [
                0,
                3,
                5,
                6,
                9
            ]
        ],
        "q": "del(.[1], .[-6], .[2], .[-3:9])"
    },
    {
        "in": [
            {
                "a": 1,
                "b": 2
            },
            {
                "a": 2,
                "b": 4
            },
            {
                "a": 7,
                "b": 8
            }
        ],
        "out": [
            [
                {
                    "a": 2,
                    "b": 2
                },
                {
                    "a": 3,
                    "b": 4
                },
                {
                    "a": 8,
                    "b": 8
                }
            ]
        ],
        "q": "def inc(x): x |= .+1; inc(.[].a)"
    },
    {
        "in": [
            {
                "a": 0
            },
            {
                "a": 1
            }
        ],
        "out": [
            "Invalid path expression near attempt to iterate through [{\"a\":1}]"
        ],
        "q": "try ((map(select(.a == 1))[].b) = 10) catch ."
    },
    {
        "in": [
            {
                "a": 0
            },
            {
                "a": 1
            }
        ],
        "out": [
            "Invalid path expression near attempt to iterate through [{\"a\":1}]"
        ],
        "q": "try ((map(select(.a == 1))[].a) |= .+1) catch ."
    },
    {
        "in": [
            0,
            1,
            2
        ],
        "out": [
            [
                0,
                10,
                10
            ]
        ],
        "q": "def x: .[1,2]; x=10"
    },
    {
        "in": [
            0,
            1,
            2
        ],
        "out": [
            "Invalid path expression with result [2,1,0]"
        ],
        "q": "try (def x: reverse; x=10) catch ."
    },
    {
        "in": [
            null,
            true,
            {
                "a": 1
            }
        ],
        "out": [
            []
        ],
        "q": "[[.[]|[.a,.a]]?]"
    },
    {
        "in": null,
        "out": [
            "{\"file\":\"<top-level>\",\"line\":1}"
        ],
        "q": "try error(\"\\($__loc__)\") catch ."
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            -4
        ],
        "q": "bsearch(4)"
    },
    {
        "in": [
            2015,
            2,
            5,
            23,
            51,
            47,
            4,
            63
        ],
        "out": [
            "2015-03-05T23:51:47Z"
        ],
        "q": "strftime(\"%Y-%m-%dT%H:%M:%SZ\")"
    },
    {
        "in": 1435677542.822351,
        "out": [
            "Tuesday, June 30, 2015"
        ],
        "q": "strftime(\"%A, %B %d, %Y\")"
    },
    {
        "in": 1425599507,
        "out": [
            [
                2015,
                2,
                5,
                23,
                51,
                47,
                4,
                63
            ]
        ],
        "q": "gmtime"
    },
    {
        "in": null,
        "out": [
            [
                "a",
                "b",
                "c",
                "a"
            ]
        ],
        "q": "import \"a\" as foo; import \"b\" as bar; def fooa: foo::a; [fooa, bar::a, bar::b, foo::a]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                "acmehbah"
            ]
        ],
        "q": "import \"c\" as foo; [foo::a, foo::c]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                "acmehbah"
            ]
        ],
        "q": "include \"c\"; [a, c]"
    },
    {
        "in": "c",
        "out": [
            {
                "deps": [
                    {
                        "as": "foo",
                        "is_data": false,
                        "relpath": "a"
                    },
                    {
                        "as": "d",
                        "is_data": false,
                        "relpath": "d",
                        "search": "./"
                    },
                    {
                        "as": "d2",
                        "is_data": false,
                        "relpath": "d",
                        "search": "./"
                    },
                    {
                        "as": "e",
                        "is_data": false,
                        "relpath": "e",
                        "search": "./../lib/jq"
                    },
                    {
                        "as": "f",
                        "is_data": false,
                        "relpath": "f",
                        "search": "./../lib/jq"
                    },
                    {
                        "as": "d",
                        "is_data": true,
                        "relpath": "data"
                    }
                ],
                "whatever": null
            }
        ],
        "q": "modulemeta"
    },
    {
        "in": null,
        "out": [
            true
        ],
        "q": "import \"test_bind_order\" as check; check::check"
    },
    {
        "in": null,
        "out": [
            {
                "and": 1,
                "as": 7,
                "catch": 12,
                "def": 8,
                "elif": 5,
                "else": 4,
                "end": 6,
                "foreach": 10,
                "if": 0,
                "import": 14,
                "include": 15,
                "label": 13,
                "module": 16,
                "or": 2,
                "reduce": 9,
                "then": 3,
                "try": 11
            }
        ],
        "q": "{if:0,and:1,or:2,then:3,else:4,elif:5,end:6,as:7,def:8,reduce:9,foreach:10,try:11,catch:12,label:13,import:14,include:15,module:16}"
    },
    {
        "in": null,
        "out": [
            true
        ],
        "q": "[range(-52;52;1)] as $powers | [$powers[]|pow(2;.)|log2] == $powers"
    },
    {
        "in": null,
        "out": [],
        "q": "[range(-99/2;99/2;1)] as $orig | [$orig[]|pow(2;.)|log2] as $back | ($orig|keys)[]|. as $k | (($orig|.[$k])-($back|.[$k]))|if . < 0 then . * -1 else . end|select(.>.00005)"
    },
    {
        "in": null,
        "out": [],
        "q": "(.[{}] = 0)?"
    }
]