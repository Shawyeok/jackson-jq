env.PAGER
def f: .+1; def g: f; def f: .+100; def f(a):a+.+11; [(g|f(20)), f]
try error("\($__loc__)") catch .

# modules
modulemeta
include "c"; [a, c]
import "a" as foo; import "b" as bar; def fooa: foo::a; [fooa, bar::a, bar::b, foo::a]
import "test_bind_order" as check; check::check
import "c" as foo; [foo::a, foo::c]

# bsearch
bsearch(0)
bsearch(4)
bsearch(4) as $ix | if $ix < 0 then .[-(1+$ix)] = 4 else . end

# time
gmtime
fromdate
strptime("%Y-%m-%dT%H:%M:%SZ")|mktime
strftime("%A, %B %d, %Y")
strptime("%Y-%m-%dT%H:%M:%SZ")
[strptime("%Y-%m-%dT%H:%M:%SZ")|(.,mktime)]
strftime("%Y-%m-%dT%H:%M:%SZ")
strftime("%A, %B %e, %Y")

# streams
. as $dot|fromstream($dot|tostream)|.==$dot
fromstream(1|truncate_stream([[0],1],[[1,0],2],[[1,0]],[[1]]))
[1|truncate_stream([[0],1],[[1,0],2],[[1,0]],[[1]])]

# destructuring 1.6
. as {$a, b: [$c, {$d}]} | [$a, $c, $d]
. as {$a, $b:[$c, $d]}| [$a, $b, $c, $d]

# destructuring with alternation
.[] | . as {$a, b: [$c, {$d}]} ?// [$a, {$b}, $e] ?// $f | [$a, $b, $c, $d, $e, $f]
try (.[] | . as {a:$a} ?// {a:$a} ?// {a:$a} | $a) catch ("__ERROR__")
try (.[] as {a:$a} ?// {a:$a} ?// {a:$a} | $a) catch ("__ERROR__")
try ([[3],[4],[5],6][] | . as {a:$a} ?// {a:$a} ?// {a:$a} | $a) catch ("__ERROR__")
try ([[3],[4],[5],6] | .[] as {a:$a} ?// {a:$a} ?// {a:$a} | $a) catch ("__ERROR__")
.[] | . as {a:$a} ?// {a:$a} ?// $a | $a
.[] as {a:$a} ?// {a:$a} ?// $a | $a
[[3],[4],[5],6][] | . as {a:$a} ?// {a:$a} ?// $a | $a
[[3],[4],[5],6] | .[] as {a:$a} ?// {a:$a} ?// $a | $a
.[] | . as {a:$a} ?// $a ?// {a:$a} | $a
.[] as {a:$a} ?// $a ?// {a:$a} | $a
[[3],[4],[5],6][] | . as {a:$a} ?// $a ?// {a:$a} | $a
[[3],[4],[5],6] | .[] as {a:$a} ?// $a ?// {a:$a} | $a
.[] | . as $a ?// {a:$a} ?// {a:$a} | $a
.[] as $a ?// {a:$a} ?// {a:$a} | $a
[[3],[4],[5],6][] | . as $a ?// {a:$a} ?// {a:$a} | $a
[[3],[4],[5],6] | .[] as $a ?// {a:$a} ?// {a:$a} | $a

# IN/JOIN/INDEX
INDEX(range(5)|[., "foo\(.)"]; .[0])
JOIN({"0":[0,"abc"],"1":[1,"bcd"],"2":[2,"def"],"3":[3,"efg"],"4":[4,"fgh"]}; .[0]|tostring)
range(5;10)|IN(range(10))
range(10;12)|IN(range(10))
IN(range(10;20); range(10))
IN(range(5;20); range(10))

# isempty
isempty(empty)
isempty(range(3))
isempty(1,error("foo"))

# vim: ft=jq
