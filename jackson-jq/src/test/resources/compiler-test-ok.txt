# test cases
.
.[]
.[][]
.[4,2]
.hoge
.fuga_
.hoge.fuga
.hoge01
.[].fuga
.[].hoge[]
.[].hoge[][]
.[].hoge[][].hoge
.["hoge"].hoge[10]["id"].hoge
.["hoge"].hoge[10]["id"].hoge | .hoge
.["hoge"].hoge[10]["id"].hoge | .hoge | .
["hoge", 10]
{"hoge": 10}
split(. | split(",") | .[0])
test("foo"; "i")
[.[]|endswith("foo")]
unique(length)
unique(.foo)
unique
group(.foo)
max(.foo)
min
del(.foo)
del(.[1, 2])
.[.[]]
.[] | .name + 1
true
false
null
.[(1 + 1) * 3]
-3
--3
-0.3
-.3
.3
{}
[]
.[:3]
.[:-2]
.[-2:]
.[2:4]
{"hoge": 10, "fuga": {"id": [100, 200]}} | "hoge" | .
contains({foo: 12, bar: [{barp: 15}]})
.[] == 1

# extension
.[:]
.[-2]

# from manual
.
.foo
.["foo"]
.[0]
.[2]
.[2:4]
.[:3]
.[-2:]
.[]
.foo, .bar
.user, .projects[]
.[4,2]
.[] | .name
[.user, .projects[]]
{user, title: .titles[]}
{(.user): .titles}
.a + 1
.a + .b
.a + null
.a + 1
{a: 1} + {b: 2} + {c: 3} + {a: 42}
4 - .a
. - ["xml", "yaml"]
10 / . * 3
. / ", "
{"k": {"a": 1, "b": 2}} * {"k": {"a": 0,"c": 3}}
.[] | length
keys
map(has("foo"))
map(has(2))
del(.foo)
del(.[1, 2])
to_entries
from_entries
map(select(. >= 2))
.[]|numbers
1, empty, 2
[1,2,empty,3]
map(.+1)
[paths]
[paths(scalars)]
add
any
all
flatten
flatten(1)
flatten
range(2;4)
[range(2;4)]
[range(4)]
floor
sqrt
.[] | tonumber
.[] | tostring
map(type)
sort
sort(.foo)
group(.foo)
min
max(.foo)
unique
unique(.foo)
unique(length)
reverse
contains("bar")
contains(["baz", "bar"])
contains(["bazzzzz", "bar"])
contains({foo: 12, bar: [{barp: 12}]})
contains({foo: 12, bar: [{barp: 15}]})
indices(", ")
indices(1)
indices([1,2])
index(", ")
rindex(", ")
[.[]|startswith("foo")]
[.[]|endswith("foo")]
match("(abc)+"; "g")
match("foo")
match(["foo", "ig"])
match("foo (?<bar123>bar)? foo"; "ig")
test("foo")
test("foo"; "i")
test("foo")
[.[]|ltrimstr("foo")]
[.[]|rtrimstr("foo")]
explode
implode
split(", ")
join(", ")
recurse(.foo[])
recurse
[.[]|tostring]
[.[]|tojson]
[.[]|tojson|fromjson]
.[] == 1
. < 5
42 and "a string"
(true, false) or false
(true, true) and (true, false)
[true, false | not]
.foo // 42
if . == 0 then "zero" elif . == 1 then "one" else "many" end
if [false,true][] then 1 elif [false,true][] then 2 else 3 end
.foo?
.["foo"]?
[.foo?]
env.PAGER
reduce .[] as $item (0; . + $item)
with_entries({key: ("KEY_" + .key), value: (.value + 2, .value + 1)})
.bar as $x | .foo | . + $x
. as $i|[(.*2|. as $i| $i), $i]
def addvalue(f): . + [f]; map(addvalue(.[0]))
def addvalue(f): f as $x | map(. + $x); addvalue(.[0])
@html
@html "hoge" | @csv[0:3]
..|.a?
"The input was \(.), which is one less than \(.+1)"
@sh "echo \(.)"
gsub("\t", "\\t")
.foo += 1
with_entries(.key |= "KEY_" + .)
