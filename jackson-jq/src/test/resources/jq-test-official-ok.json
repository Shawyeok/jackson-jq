[
    {
        "in": "Hello, world!",
        "out": [
            "Hello, world!"
        ],
        "q": "."
    },
    {
        "in": {
            "bar": "less interesting data",
            "foo": 42
        },
        "out": [
            42
        ],
        "q": ".foo"
    },
    {
        "in": {
            "alsonotfoo": false,
            "notfoo": true
        },
        "out": [
            null
        ],
        "q": ".foo"
    },
    {
        "in": {
            "foo": 42
        },
        "out": [
            42
        ],
        "q": ".[\"foo\"]"
    },
    {
        "in": {
            "bar": "less interesting data",
            "foo": 42
        },
        "out": [
            42
        ],
        "q": ".foo?"
    },
    {
        "in": {
            "alsonotfoo": false,
            "notfoo": true
        },
        "out": [
            null
        ],
        "q": ".foo?"
    },
    {
        "in": {
            "foo": 42
        },
        "out": [
            42
        ],
        "q": ".[\"foo\"]?"
    },
    {
        "in": [
            1,
            2
        ],
        "out": [
            []
        ],
        "q": "[.foo?]"
    },
    {
        "in": [
            {
                "good": true,
                "name": "JSON"
            },
            {
                "good": false,
                "name": "XML"
            }
        ],
        "out": [
            {
                "good": true,
                "name": "JSON"
            }
        ],
        "q": ".[0]"
    },
    {
        "in": [
            {
                "good": true,
                "name": "JSON"
            },
            {
                "good": false,
                "name": "XML"
            }
        ],
        "out": [
            null
        ],
        "q": ".[2]"
    },
    {
        "in": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ],
        "out": [
            [
                "c",
                "d"
            ]
        ],
        "q": ".[2:4]"
    },
    {
        "in": "abcdefghi",
        "out": [
            "cd"
        ],
        "q": ".[2:4]"
    },
    {
        "in": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ],
        "out": [
            [
                "a",
                "b",
                "c"
            ]
        ],
        "q": ".[:3]"
    },
    {
        "in": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ],
        "out": [
            [
                "d",
                "e"
            ]
        ],
        "q": ".[-2:]"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            2
        ],
        "q": ".[-2]"
    },
    {
        "in": [
            {
                "good": true,
                "name": "JSON"
            },
            {
                "good": false,
                "name": "XML"
            }
        ],
        "out": [
            {
                "good": true,
                "name": "JSON"
            },
            {
                "good": false,
                "name": "XML"
            }
        ],
        "q": ".[]"
    },
    {
        "in": [],
        "out": [],
        "q": ".[]"
    },
    {
        "in": {
            "a": 1,
            "b": 1
        },
        "out": [
            1,
            1
        ],
        "q": ".[]"
    },
    {
        "in": {
            "bar": "something else",
            "baz": true,
            "foo": 42
        },
        "out": [
            42,
            "something else"
        ],
        "q": ".foo, .bar"
    },
    {
        "in": {
            "projects": [
                "jq",
                "wikiflow"
            ],
            "user": "stedolan"
        },
        "out": [
            "stedolan",
            "jq",
            "wikiflow"
        ],
        "q": ".user, .projects[]"
    },
    {
        "in": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ],
        "out": [
            "e",
            "c"
        ],
        "q": ".[4,2]"
    },
    {
        "in": [
            {
                "good": true,
                "name": "JSON"
            },
            {
                "good": false,
                "name": "XML"
            }
        ],
        "out": [
            "JSON",
            "XML"
        ],
        "q": ".[] | .name"
    },
    {
        "in": {
            "projects": [
                "jq",
                "wikiflow"
            ],
            "user": "stedolan"
        },
        "out": [
            [
                "stedolan",
                "jq",
                "wikiflow"
            ]
        ],
        "q": "[.user, .projects[]]"
    },
    {
        "in": {
            "titles": [
                "JQ Primer",
                "More JQ"
            ],
            "user": "stedolan"
        },
        "out": [
            {
                "title": "JQ Primer",
                "user": "stedolan"
            },
            {
                "title": "More JQ",
                "user": "stedolan"
            }
        ],
        "q": "{user, title: .titles[]}"
    },
    {
        "in": {
            "titles": [
                "JQ Primer",
                "More JQ"
            ],
            "user": "stedolan"
        },
        "out": [
            {
                "stedolan": [
                    "JQ Primer",
                    "More JQ"
                ]
            }
        ],
        "q": "{(.user): .titles}"
    },
    {
        "in": {
            "a": 7
        },
        "out": [
            8
        ],
        "q": ".a + 1"
    },
    {
        "in": {
            "a": [
                1,
                2
            ],
            "b": [
                3,
                4
            ]
        },
        "out": [
            [
                1,
                2,
                3,
                4
            ]
        ],
        "q": ".a + .b"
    },
    {
        "in": {
            "a": 1
        },
        "out": [
            1
        ],
        "q": ".a + null"
    },
    {
        "in": {},
        "out": [
            1
        ],
        "q": ".a + 1"
    },
    {
        "in": null,
        "out": [
            {
                "a": 42,
                "b": 2,
                "c": 3
            }
        ],
        "q": "{a: 1} + {b: 2} + {c: 3} + {a: 42}"
    },
    {
        "in": {
            "a": 3
        },
        "out": [
            1
        ],
        "q": "4 - .a"
    },
    {
        "in": [
            "xml",
            "yaml",
            "json"
        ],
        "out": [
            [
                "json"
            ]
        ],
        "q": ". - [\"xml\", \"yaml\"]"
    },
    {
        "in": 5,
        "out": [
            6
        ],
        "q": "10 / . * 3"
    },
    {
        "in": "a, b,c,d, e",
        "out": [
            [
                "a",
                "b,c,d",
                "e"
            ]
        ],
        "q": ". / \", \""
    },
    {
        "in": null,
        "out": [
            {
                "k": {
                    "a": 0,
                    "b": 2,
                    "c": 3
                }
            }
        ],
        "q": "{\"k\": {\"a\": 1, \"b\": 2}} * {\"k\": {\"a\": 0,\"c\": 3}}"
    },
    {
        "in": [
            1,
            0,
            -1
        ],
        "out": [
            1,
            -1
        ],
        "q": ".[] | (1 / .)?"
    },
    {
        "in": [
            [
                1,
                2
            ],
            "string",
            {
                "a": 2
            },
            null
        ],
        "out": [
            2,
            6,
            1,
            0
        ],
        "q": ".[] | length"
    },
    {
        "in": {
            "Foo": 3,
            "abc": 1,
            "abcd": 2
        },
        "out": [
            [
                "Foo",
                "abc",
                "abcd"
            ]
        ],
        "q": "keys"
    },
    {
        "in": [
            42,
            3,
            35
        ],
        "out": [
            [
                0,
                1,
                2
            ]
        ],
        "q": "keys"
    },
    {
        "in": [
            {
                "foo": 42
            },
            {}
        ],
        "out": [
            [
                true,
                false
            ]
        ],
        "q": "map(has(\"foo\"))"
    },
    {
        "in": [
            [
                0,
                1
            ],
            [
                "a",
                "b",
                "c"
            ]
        ],
        "out": [
            [
                false,
                true
            ]
        ],
        "q": "map(has(2))"
    },
    {
        "in": [
            "foo",
            "bar"
        ],
        "out": [
            true,
            false
        ],
        "q": ".[] | in({\"foo\": 42})"
    },
    {
        "in": [
            2,
            0
        ],
        "out": [
            [
                false,
                true
            ]
        ],
        "q": "map(in([0,1]))"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            [
                2,
                3,
                4
            ]
        ],
        "q": "map(.+1)"
    },
    {
        "in": {
            "a": 1,
            "b": 2,
            "c": 3
        },
        "out": [
            {
                "a": 2,
                "b": 3,
                "c": 4
            }
        ],
        "q": "map_values(.+1)"
    },
    {
        "in": {
            "bar": 9001,
            "baz": 42,
            "foo": 42
        },
        "out": [
            {
                "bar": 9001,
                "baz": 42
            }
        ],
        "q": "del(.foo)"
    },
    {
        "in": [
            "foo",
            "bar",
            "baz"
        ],
        "out": [
            [
                "foo"
            ]
        ],
        "q": "del(.[1, 2])"
    },
    {
        "in": {
            "a": 1,
            "b": 2
        },
        "out": [
            [
                {
                    "key": "a",
                    "value": 1
                },
                {
                    "key": "b",
                    "value": 2
                }
            ]
        ],
        "q": "to_entries"
    },
    {
        "in": [
            {
                "key": "a",
                "value": 1
            },
            {
                "key": "b",
                "value": 2
            }
        ],
        "out": [
            {
                "a": 1,
                "b": 2
            }
        ],
        "q": "from_entries"
    },
    {
        "in": {
            "a": 1,
            "b": 2
        },
        "out": [
            {
                "KEY_a": 1,
                "KEY_b": 2
            }
        ],
        "q": "with_entries(.key |= \"KEY_\" + .)"
    },
    {
        "in": [
            1,
            5,
            3,
            0,
            7
        ],
        "out": [
            [
                5,
                3,
                7
            ]
        ],
        "q": "map(select(. >= 2))"
    },
    {
        "in": [
            {
                "id": "first",
                "val": 1
            },
            {
                "id": "second",
                "val": 2
            }
        ],
        "out": [
            {
                "id": "second",
                "val": 2
            }
        ],
        "q": ".[] | select(.id == \"second\")"
    },
    {
        "in": [
            [],
            {},
            1,
            "foo",
            null,
            true,
            false
        ],
        "out": [
            1
        ],
        "q": ".[]|numbers"
    },
    {
        "in": null,
        "out": [
            1,
            2
        ],
        "q": "1, empty, 2"
    },
    {
        "in": null,
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": "[1,2,empty,3]"
    },
    {
        "in": [
            1,
            [
                [],
                {
                    "a": 2
                }
            ]
        ],
        "out": [
            [
                [
                    0
                ],
                [
                    1
                ],
                [
                    1,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    1,
                    "a"
                ]
            ]
        ],
        "q": "[paths]"
    },
    {
        "in": [
            1,
            [
                [],
                {
                    "a": 2
                }
            ]
        ],
        "out": [
            [
                [
                    0
                ],
                [
                    1,
                    1,
                    "a"
                ]
            ]
        ],
        "q": "[paths(scalars)]"
    },
    {
        "in": [
            "a",
            "b",
            "c"
        ],
        "out": [
            "abc"
        ],
        "q": "add"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            6
        ],
        "q": "add"
    },
    {
        "in": [],
        "out": [
            null
        ],
        "q": "add"
    },
    {
        "in": [
            true,
            false
        ],
        "out": [
            true
        ],
        "q": "any"
    },
    {
        "in": [
            false,
            false
        ],
        "out": [
            false
        ],
        "q": "any"
    },
    {
        "in": [],
        "out": [
            false
        ],
        "q": "any"
    },
    {
        "in": [
            true,
            false
        ],
        "out": [
            false
        ],
        "q": "all"
    },
    {
        "in": [
            true,
            true
        ],
        "out": [
            true
        ],
        "q": "all"
    },
    {
        "in": [],
        "out": [
            true
        ],
        "q": "all"
    },
    {
        "in": [
            1,
            [
                2
            ],
            [
                [
                    3
                ]
            ]
        ],
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": "flatten"
    },
    {
        "in": [
            1,
            [
                2
            ],
            [
                [
                    3
                ]
            ]
        ],
        "out": [
            [
                1,
                2,
                [
                    3
                ]
            ]
        ],
        "q": "flatten(1)"
    },
    {
        "in": [
            []
        ],
        "out": [
            []
        ],
        "q": "flatten"
    },
    {
        "in": [
            {
                "foo": "bar"
            },
            [
                {
                    "foo": "baz"
                }
            ]
        ],
        "out": [
            [
                {
                    "foo": "bar"
                },
                {
                    "foo": "baz"
                }
            ]
        ],
        "q": "flatten"
    },
    {
        "in": null,
        "out": [
            2,
            3
        ],
        "q": "range(2;4)"
    },
    {
        "in": null,
        "out": [
            [
                2,
                3
            ]
        ],
        "q": "[range(2;4)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                3
            ]
        ],
        "q": "[range(4)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                3,
                6,
                9
            ]
        ],
        "q": "[range(0;10;3)]"
    },
    {
        "in": null,
        "out": [
            []
        ],
        "q": "[range(0;10;-1)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                -1,
                -2,
                -3,
                -4
            ]
        ],
        "q": "[range(0;-5;-1)]"
    },
    {
        "in": 3.14159,
        "out": [
            3
        ],
        "q": "floor"
    },
    {
        "in": 9,
        "out": [
            3
        ],
        "q": "sqrt"
    },
    {
        "in": [
            1,
            "1"
        ],
        "out": [
            1,
            1
        ],
        "q": ".[] | tonumber"
    },
    {
        "in": [
            1,
            "1",
            [
                1
            ]
        ],
        "out": [
            "1",
            "1",
            "[1]"
        ],
        "q": ".[] | tostring"
    },
    {
        "in": [
            0,
            false,
            [],
            {},
            null,
            "hello"
        ],
        "out": [
            [
                "number",
                "boolean",
                "array",
                "object",
                "null",
                "string"
            ]
        ],
        "q": "map(type)"
    },
    {
        "in": [
            -1,
            1
        ],
        "out": [
            true,
            false
        ],
        "q": ".[] | (infinite * .) < 0"
    },
    {
        "in": null,
        "out": [
            "number",
            "number"
        ],
        "q": "infinite, nan | type"
    },
    {
        "in": [
            8,
            3,
            null,
            6
        ],
        "out": [
            [
                null,
                3,
                6,
                8
            ]
        ],
        "q": "sort"
    },
    {
        "in": [
            {
                "bar": 10,
                "foo": 4
            },
            {
                "bar": 100,
                "foo": 3
            },
            {
                "bar": 1,
                "foo": 2
            }
        ],
        "out": [
            [
                {
                    "bar": 1,
                    "foo": 2
                },
                {
                    "bar": 100,
                    "foo": 3
                },
                {
                    "bar": 10,
                    "foo": 4
                }
            ]
        ],
        "q": "sort_by(.foo)"
    },
    {
        "in": [
            {
                "bar": 10,
                "foo": 1
            },
            {
                "bar": 100,
                "foo": 3
            },
            {
                "bar": 1,
                "foo": 1
            }
        ],
        "out": [
            [
                [
                    {
                        "bar": 10,
                        "foo": 1
                    },
                    {
                        "bar": 1,
                        "foo": 1
                    }
                ],
                [
                    {
                        "bar": 100,
                        "foo": 3
                    }
                ]
            ]
        ],
        "q": "group_by(.foo)"
    },
    {
        "in": [
            5,
            4,
            2,
            7
        ],
        "out": [
            2
        ],
        "q": "min"
    },
    {
        "in": [
            {
                "bar": 14,
                "foo": 1
            },
            {
                "bar": 3,
                "foo": 2
            }
        ],
        "out": [
            {
                "bar": 3,
                "foo": 2
            }
        ],
        "q": "max_by(.foo)"
    },
    {
        "in": [
            1,
            2,
            5,
            3,
            5,
            3,
            1,
            3
        ],
        "out": [
            [
                1,
                2,
                3,
                5
            ]
        ],
        "q": "unique"
    },
    {
        "in": [
            {
                "bar": 2,
                "foo": 1
            },
            {
                "bar": 3,
                "foo": 1
            },
            {
                "bar": 5,
                "foo": 4
            }
        ],
        "out": [
            [
                {
                    "bar": 2,
                    "foo": 1
                },
                {
                    "bar": 5,
                    "foo": 4
                }
            ]
        ],
        "q": "unique_by(.foo)"
    },
    {
        "in": [
            "chunky",
            "bacon",
            "kitten",
            "cicada",
            "asparagus"
        ],
        "out": [
            [
                "bacon",
                "chunky",
                "asparagus"
            ]
        ],
        "q": "unique_by(length)"
    },
    {
        "in": [
            1,
            2,
            3,
            4
        ],
        "out": [
            [
                4,
                3,
                2,
                1
            ]
        ],
        "q": "reverse"
    },
    {
        "in": "foobar",
        "out": [
            true
        ],
        "q": "contains(\"bar\")"
    },
    {
        "in": [
            "foobar",
            "foobaz",
            "blarp"
        ],
        "out": [
            true
        ],
        "q": "contains([\"baz\", \"bar\"])"
    },
    {
        "in": [
            "foobar",
            "foobaz",
            "blarp"
        ],
        "out": [
            false
        ],
        "q": "contains([\"bazzzzz\", \"bar\"])"
    },
    {
        "in": {
            "bar": [
                1,
                2,
                {
                    "barp": 12,
                    "blip": 13
                }
            ],
            "foo": 12
        },
        "out": [
            true
        ],
        "q": "contains({foo: 12, bar: [{barp: 12}]})"
    },
    {
        "in": {
            "bar": [
                1,
                2,
                {
                    "barp": 12,
                    "blip": 13
                }
            ],
            "foo": 12
        },
        "out": [
            false
        ],
        "q": "contains({foo: 12, bar: [{barp: 15}]})"
    },
    {
        "in": "a,b, cd, efg, hijk",
        "out": [
            [
                3,
                7,
                12
            ]
        ],
        "q": "indices(\", \")"
    },
    {
        "in": [
            0,
            1,
            2,
            1,
            3,
            1,
            4
        ],
        "out": [
            [
                1,
                3,
                5
            ]
        ],
        "q": "indices(1)"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            1,
            4,
            2,
            5,
            1,
            2,
            6,
            7
        ],
        "out": [
            [
                1,
                8
            ]
        ],
        "q": "indices([1,2])"
    },
    {
        "in": "a,b, cd, efg, hijk",
        "out": [
            3
        ],
        "q": "index(\", \")"
    },
    {
        "in": "a,b, cd, efg, hijk",
        "out": [
            12
        ],
        "q": "rindex(\", \")"
    },
    {
        "in": "bar",
        "out": [
            true
        ],
        "q": "inside(\"foobar\")"
    },
    {
        "in": [
            "baz",
            "bar"
        ],
        "out": [
            true
        ],
        "q": "inside([\"foobar\", \"foobaz\", \"blarp\"])"
    },
    {
        "in": [
            "bazzzzz",
            "bar"
        ],
        "out": [
            false
        ],
        "q": "inside([\"foobar\", \"foobaz\", \"blarp\"])"
    },
    {
        "in": {
            "bar": [
                {
                    "barp": 12
                }
            ],
            "foo": 12
        },
        "out": [
            true
        ],
        "q": "inside({\"foo\": 12, \"bar\":[1,2,{\"barp\":12, \"blip\":13}]})"
    },
    {
        "in": {
            "bar": [
                {
                    "barp": 15
                }
            ],
            "foo": 12
        },
        "out": [
            false
        ],
        "q": "inside({\"foo\": 12, \"bar\":[1,2,{\"barp\":12, \"blip\":13}]})"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "barfoob"
        ],
        "out": [
            [
                false,
                true,
                false,
                true,
                false
            ]
        ],
        "q": "[.[]|startswith(\"foo\")]"
    },
    {
        "in": [
            "foobar",
            "barfoo"
        ],
        "out": [
            [
                false,
                true
            ]
        ],
        "q": "[.[]|endswith(\"foo\")]"
    },
    {
        "in": [
            [
                1,
                2
            ],
            [
                3,
                4
            ]
        ],
        "out": [
            [
                1,
                3
            ],
            [
                1,
                4
            ],
            [
                2,
                3
            ],
            [
                2,
                4
            ]
        ],
        "q": "combinations"
    },
    {
        "in": [
            0,
            1
        ],
        "out": [
            [
                0,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                1
            ]
        ],
        "q": "combinations(2)"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "afoo"
        ],
        "out": [
            [
                "fo",
                "",
                "barfoo",
                "bar",
                "afoo"
            ]
        ],
        "q": "[.[]|ltrimstr(\"foo\")]"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "foob"
        ],
        "out": [
            [
                "fo",
                "",
                "bar",
                "foobar",
                "foob"
            ]
        ],
        "q": "[.[]|rtrimstr(\"foo\")]"
    },
    {
        "in": "foobar",
        "out": [
            [
                102,
                111,
                111,
                98,
                97,
                114
            ]
        ],
        "q": "explode"
    },
    {
        "in": [
            65,
            66,
            67
        ],
        "out": [
            "ABC"
        ],
        "q": "implode"
    },
    {
        "in": "a, b,c,d, e, ",
        "out": [
            [
                "a",
                "b,c,d",
                "e",
                ""
            ]
        ],
        "q": "split(\", \")"
    },
    {
        "in": [
            "a",
            "b,c,d",
            "e"
        ],
        "out": [
            "a, b,c,d, e"
        ],
        "q": "join(\", \")"
    },
    {
        "in": [
            "a",
            1,
            2.3,
            true,
            null,
            false
        ],
        "out": [
            "a 1 2.3 true  false"
        ],
        "q": "join(\" \")"
    },
    {
        "in": 1,
        "out": [
            [
                1,
                2,
                4,
                8,
                16,
                32,
                64
            ]
        ],
        "q": "[while(.<100; .*2)]"
    },
    {
        "in": 4,
        "out": [
            24
        ],
        "q": "[.,1]|until(.[0] < 1; [.[0] - 1, .[1] * .[0]])|.[1]"
    },
    {
        "in": {
            "foo": [
                {
                    "foo": []
                },
                {
                    "foo": [
                        {
                            "foo": []
                        }
                    ]
                }
            ]
        },
        "out": [
            {
                "foo": [
                    {
                        "foo": []
                    },
                    {
                        "foo": [
                            {
                                "foo": []
                            }
                        ]
                    }
                ]
            },
            {
                "foo": []
            },
            {
                "foo": [
                    {
                        "foo": []
                    }
                ]
            },
            {
                "foo": []
            }
        ],
        "q": "recurse(.foo[])"
    },
    {
        "in": {
            "a": 0,
            "b": [
                1
            ]
        },
        "out": [
            {
                "a": 0,
                "b": [
                    1
                ]
            },
            0,
            [
                1
            ],
            1
        ],
        "q": "recurse"
    },
    {
        "in": 2,
        "out": [
            2,
            4,
            16
        ],
        "q": "recurse(. * .; . < 20)"
    },
    {
        "in": [
            [
                4,
                1,
                7
            ],
            [
                8,
                5,
                2
            ],
            [
                3,
                6,
                9
            ]
        ],
        "out": [
            [
                [
                    1,
                    4,
                    7
                ],
                [
                    2,
                    5,
                    8
                ],
                [
                    3,
                    6,
                    9
                ]
            ]
        ],
        "q": "walk(if type == \"array\" then sort else . end)"
    },
    {
        "in": [
            {
                "_a": {
                    "__b": 2
                }
            }
        ],
        "out": [
            [
                {
                    "a": {
                        "b": 2
                    }
                }
            ]
        ],
        "q": "walk( if type == \"object\" then with_entries( .key |= sub( \"^_+\"; \"\") ) else . end )"
    },
    {
        "in": [
            [
                {
                    "a": 1
                }
            ]
        ],
        "out": [
            1
        ],
        "q": "..|.a?"
    },
    {
        "in": [
            [
                1
            ],
            [
                2,
                3
            ]
        ],
        "out": [
            [
                [
                    1,
                    2
                ],
                [
                    null,
                    3
                ]
            ]
        ],
        "q": "transpose"
    },
    {
        "in": 42,
        "out": [
            "The input was 42, which is one less than 43"
        ],
        "q": "\"The input was \\(.), which is one less than \\(.+1)\""
    },
    {
        "in": [
            1,
            "foo",
            [
                "foo"
            ]
        ],
        "out": [
            [
                "1",
                "foo",
                "[\"foo\"]"
            ]
        ],
        "q": "[.[]|tostring]"
    },
    {
        "in": [
            1,
            "foo",
            [
                "foo"
            ]
        ],
        "out": [
            [
                "1",
                "\"foo\"",
                "[\"foo\"]"
            ]
        ],
        "q": "[.[]|tojson]"
    },
    {
        "in": [
            1,
            "foo",
            [
                "foo"
            ]
        ],
        "out": [
            [
                1,
                "foo",
                [
                    "foo"
                ]
            ]
        ],
        "q": "[.[]|tojson|fromjson]"
    },
    {
        "in": "This works if x < y",
        "out": [
            "This works if x &lt; y"
        ],
        "q": "@html"
    },
    {
        "in": "O'Hara's Ale",
        "out": [
            "echo 'O'\\''Hara'\\''s Ale'"
        ],
        "q": "@sh \"echo \\(.)\""
    },
    {
        "in": [
            1,
            1.0,
            "1",
            "banana"
        ],
        "out": [
            true,
            true,
            false,
            false
        ],
        "q": ".[] == 1"
    },
    {
        "in": 2,
        "out": [
            "many"
        ],
        "q": "if . == 0 then\n  \"zero\"\nelif . == 1 then\n  \"one\"\nelse\n  \"many\"\nend"
    },
    {
        "in": 2,
        "out": [
            true
        ],
        "q": ". < 5"
    },
    {
        "in": null,
        "out": [
            true
        ],
        "q": "42 and \"a string\""
    },
    {
        "in": null,
        "out": [
            true,
            false
        ],
        "q": "(true, false) or false"
    },
    {
        "in": null,
        "out": [
            true,
            false,
            true,
            false
        ],
        "q": "(true, true) and (true, false)"
    },
    {
        "in": null,
        "out": [
            [
                false,
                true
            ]
        ],
        "q": "[true, false | not]"
    },
    {
        "in": {
            "foo": 19
        },
        "out": [
            19
        ],
        "q": ".foo // 42"
    },
    {
        "in": {},
        "out": [
            42
        ],
        "q": ".foo // 42"
    },
    {
        "in": true,
        "out": [
            ". is not an object"
        ],
        "q": "try .a catch \". is not an object\""
    },
    {
        "in": [
            {},
            true,
            {
                "a": 1
            }
        ],
        "out": [
            [
                null,
                1
            ]
        ],
        "q": "[.[]|try .a]"
    },
    {
        "in": true,
        "out": [
            "some exception"
        ],
        "q": "try error(\"some exception\") catch ."
    },
    {
        "in": [
            {},
            true,
            {
                "a": 1
            }
        ],
        "out": [
            [
                null,
                1
            ]
        ],
        "q": "[.[]|(.a)?]"
    },
    {
        "in": "foo",
        "out": [
            true
        ],
        "q": "test(\"foo\")"
    },
    {
        "in": [
            "xabcd",
            "ABC"
        ],
        "out": [
            true,
            true
        ],
        "q": ".[] | test(\"a b c # spaces are ignored\"; \"ix\")"
    },
    {
        "in": "abc abc",
        "out": [
            {
                "captures": [
                    {
                        "length": 3,
                        "name": null,
                        "offset": 0,
                        "string": "abc"
                    }
                ],
                "length": 3,
                "offset": 0,
                "string": "abc"
            },
            {
                "captures": [
                    {
                        "length": 3,
                        "name": null,
                        "offset": 4,
                        "string": "abc"
                    }
                ],
                "length": 3,
                "offset": 4,
                "string": "abc"
            }
        ],
        "q": "match(\"(abc)+\"; \"g\")"
    },
    {
        "in": "foo bar foo",
        "out": [
            {
                "captures": [],
                "length": 3,
                "offset": 0,
                "string": "foo"
            }
        ],
        "q": "match(\"foo\")"
    },
    {
        "in": "foo bar FOO",
        "out": [
            {
                "captures": [],
                "length": 3,
                "offset": 0,
                "string": "foo"
            },
            {
                "captures": [],
                "length": 3,
                "offset": 8,
                "string": "FOO"
            }
        ],
        "q": "match([\"foo\", \"ig\"])"
    },
    {
        "in": "foo bar foo foo  foo",
        "out": [
            {
                "captures": [
                    {
                        "length": 3,
                        "name": "bar123",
                        "offset": 4,
                        "string": "bar"
                    }
                ],
                "length": 11,
                "offset": 0,
                "string": "foo bar foo"
            },
            {
                "captures": [
                    {
                        "length": 0,
                        "name": "bar123",
                        "offset": -1,
                        "string": null
                    }
                ],
                "length": 8,
                "offset": 12,
                "string": "foo  foo"
            }
        ],
        "q": "match(\"foo (?<bar123>bar)? foo\"; \"ig\")"
    },
    {
        "in": "abc",
        "out": [
            3
        ],
        "q": "[ match(\".\"; \"g\")] | length"
    },
    {
        "in": "xyzzy-14",
        "out": [
            {
                "a": "xyzzy",
                "n": "14"
            }
        ],
        "q": "capture(\"(?<a>[a-z]+)-(?<n>[0-9]+)\")"
    },
    {
        "in": {
            "bar": 200,
            "foo": 10
        },
        "out": [
            210
        ],
        "q": ".bar as $x | .foo | . + $x"
    },
    {
        "in": 5,
        "out": [
            [
                10,
                5
            ]
        ],
        "q": ". as $i|[(.*2|. as $i| $i), $i]"
    },
    {
        "in": [
            [
                1,
                2
            ],
            [
                10,
                20
            ]
        ],
        "out": [
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    10,
                    20,
                    10
                ]
            ]
        ],
        "q": "def addvalue(f): . + [f]; map(addvalue(.[0]))"
    },
    {
        "in": [
            [
                1,
                2
            ],
            [
                10,
                20
            ]
        ],
        "out": [
            [
                [
                    1,
                    2,
                    1,
                    2
                ],
                [
                    10,
                    20,
                    1,
                    2
                ]
            ]
        ],
        "q": "def addvalue(f): f as $x | map(. + $x); addvalue(.[0])"
    },
    {
        "in": [
            10,
            2,
            5,
            3
        ],
        "out": [
            20
        ],
        "q": "reduce .[] as $item (0; . + $item)"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        ],
        "out": [
            [
                0,
                1,
                2
            ]
        ],
        "q": "[limit(3;.[])]"
    },
    {
        "in": 10,
        "out": [
            [
                0,
                9,
                5
            ]
        ],
        "q": "[first(range(.)), last(range(.)), nth(./2; range(.))]"
    },
    {
        "in": 10,
        "out": [
            [
                0,
                9,
                5
            ]
        ],
        "q": "[range(.)]|[first, last, nth(5)]"
    },
    {
        "in": [
            1,
            2,
            3,
            4,
            null,
            "a",
            "b",
            null
        ],
        "out": [
            [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    "a",
                    "b"
                ]
            ]
        ],
        "q": "[foreach .[] as $item ([[],[]]; if $item == null then [[],.[0]] else [(.[0] + [$item]),[]] end; if $item == null then .[1] else empty end)]"
    },
    {
        "in": null,
        "out": [
            0,
            3,
            6,
            9
        ],
        "q": "def range(init; upto; by): def _range: if (by > 0 and . < upto) or (by < 0 and . > upto) then ., ((.+by)|_range) else . end; if by == 0 then init else init|_range end | select((by > 0 and . < upto) or (by < 0 and . > upto)); range(0; 10; 3)"
    },
    {
        "in": 1,
        "out": [
            [
                1,
                2,
                4,
                8,
                16,
                32,
                64
            ]
        ],
        "q": "def while(cond; update): def _while: if cond then ., (update | _while) else empty end; _while; [while(.<100; .*2)]"
    },
    {
        "in": {
            "foo": 42
        },
        "out": [
            {
                "foo": 43
            }
        ],
        "q": ".foo += 1"
    }
]